# Backend Environment Variables Example
# Copy to .env and adjust values as needed.

# Port the Express server listens on (Railway often injects PORT automatically)
PORT=3000

# Node environment: development | production
NODE_ENV=development

# Human-readable server location label (displayed in /api/info)
SERVER_LOCATION=Railway EU-West

# CORS allowed origin (frontend URL). Use * ONLY for local development.
CORS_ORIGIN=http://localhost:8080

# Maximum allowed download test size in MB (clamped in /api/download)
MAX_DOWNLOAD_SIZE_MB=50

# Advisory max upload size in MB (display only; raw body limit can be enforced separately)
MAX_UPLOAD_SIZE_MB=50

# Rate limiting (applied to light endpoints; download/upload excluded)
ENABLE_RATE_LIMIT=true
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX=120

# ========================================
# OBSERVABILITY & MONITORING
# ========================================

# Enable Prometheus metrics endpoint (/metrics)
ENABLE_METRICS=true

# Logging level: debug | info | warn | error
LOG_LEVEL=info

# Circuit breaker: Max concurrent requests before rejecting with 503
MAX_INFLIGHT_REQUESTS=100

# NOTES:
# - Set ENABLE_RATE_LIMIT=false for internal benchmarking to remove added latency.
# - Increase MAX_DOWNLOAD_SIZE_MB cautiously; large values consume server bandwidth and memory.
# - CORS_ORIGIN can be a comma-separated list for staging/frontends.
# - For multi-region deployments, set SERVER_LOCATION per instance (e.g., us-east, eu-west).
# - ENABLE_METRICS=true exposes /metrics for Prometheus scraping (production recommended).
# - LOG_LEVEL=debug provides verbose logs for troubleshooting (development only).
# - MAX_INFLIGHT_REQUESTS protects against overload; adjust based on server capacity.
